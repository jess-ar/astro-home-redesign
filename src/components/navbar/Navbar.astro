---
interface Link {
  title: string;
  href: string;
}
interface LinkWithDesc extends Link {
  description: string;
}
interface Mega {
  heading: string;
  subheading: string;
  items: LinkWithDesc[];
  footer: Link;
}
type NavItem = { title: string; mega: Mega; children: Link[] } | Link;

const navItems: NavItem[] = [
  {
    title: "Solutions",
    mega: {
      heading: "made-to-measure",
      subheading: "Email and SMS Platforms",
      items: [
        {
          title: "Professional",
          href: "/solutions/professional",
          description:
            "The platform ready to tailor to your email marketing strategy.",
        },
        {
          title: "Agency",
          href: "/solutions/agency",
          description:
            "A dedicated platform for agency marketing professionals.",
        },
        {
          title: "Ecommerce",
          href: "/solutions/ecommerce",
          description:
            "Literally the one-stop-shop for ecommerce marketing management.",
        },
        {
          title: "White label, Integrated and Bespoke",
          href: "/solutions/white-label",
          description:
            "Add to your portfolio a fully branded… go entirely bespoke.",
        },
        {
          title: "Connectivity",
          href: "/solutions/connectivity",
          description:
            "Utilising the resources of MailXpertise technology bolting on to your solutions.",
        },
      ],
      footer: { title: "why made-to-measure?", href: "/different" },
    },
    children: [
      { title: "Professional", href: "/solutions/professional" },
      { title: "Agency", href: "/solutions/agency" },
      { title: "Ecommerce", href: "/solutions/ecommerce" },
      { title: "White label", href: "/solutions/white-label" },
      { title: "Connectivity", href: "/solutions/connectivity" },
    ],
  },
  { title: "Partnerships", href: "/partnerships" },
  { title: "Deliverability", href: "/deliverability" },
  { title: "About", href: "/about" },
];

const rightNav: Link[] = [
  { title: "Different…", href: "/different" },
  { title: "Integrations", href: "/integrations" },
  { title: "Contact", href: "/contact" },
  { title: "Login", href: "/login" },
];

const currentPath = Astro.url.pathname;

const linkBase = "font-medium relative transition-colors cursor-pointer";
const linkActive = "text-secondary bg-secondary/20 rounded-full px-3 py-2";
const linkInactive = "text-white hover:text-secondary";
---

<header
  id="navbar"
  class="fixed inset-x-0 top-0 z-50 bg-gradient-to-r from-primary to-footer-background shadow transition-shadow duration-300 font-primary"
>
  <div class="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-10 xl:px-20">
    <div class="flex items-center justify-between h-16 md:h-20">
      <button
        id="navToggle"
        class="block text-white hover:text-secondary min-[1150px]:hidden cursor-pointer"
        aria-label="Toggle navigation"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M4 6h16M4 12h16M4 18h16"
          ></path>
        </svg>
      </button>

      <nav class="hidden items-center space-x-6 min-[1150px]:flex">
        {
          navItems.map((item) => {
            if ("mega" in item) {
              const isActive = currentPath.startsWith("/solutions");
              return (
                <div class="relative group cursor-pointer">
                  <button
                    aria-current={isActive ? "page" : null}
                    class={`${linkBase} ${isActive ? linkActive : linkInactive} flex items-center`}
                  >
                    {item.title}
                    <svg
                      class="ml-1 w-4 h-4 transition-transform group-hover:rotate-180"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </button>
                  <div class="absolute left-0 mt-2 w-[600px] bg-white rounded-lg shadow-lg ring-1 ring-black/5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all">
                    <div class="flex">
                      <div class="w-1/3 px-4 py-4">
                        <p class="font-bold text-sm">{item.mega.heading}</p>
                        <p class="mt-1 text-xs text-gray-500">
                          {item.mega.subheading}
                        </p>
                      </div>
                      <div class="w-px bg-primary" />
                      <div class="w-2/3 px-4 py-4 space-y-4">
                        {item.mega.items.map((link) => (
                          <div>
                            <a
                              href={link.href}
                              class="text-sm font-semibold hover:text-secondary cursor-pointer"
                            >
                              {link.title}
                            </a>
                            <p class="text-xs text-gray-600">
                              {link.description}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                    <div class="border-t px-4 py-2">
                      <a
                        href={item.mega.footer.href}
                        class="text-xs text-secondary hover:underline cursor-pointer"
                      >
                        {item.mega.footer.title}
                      </a>
                    </div>
                  </div>
                </div>
              );
            }
            const isActive = item.href === currentPath;
            return (
              <a
                href={item.href}
                aria-current={isActive ? "page" : null}
                class={`${linkBase} ${isActive ? linkActive : linkInactive}`}
              >
                {item.title}
              </a>
            );
          })
        }
      </nav>

      <a
        href="/"
        class="flex items-center cursor-pointer"
      >
        <img
          src="/logo-mailxpertise.png"
          alt="MailXpertise logo"
          class="h-8 md:h-9"
        />
      </a>

      <nav class="hidden items-center space-x-6 min-[1150px]:flex">
        {
          rightNav.map((link) => {
            const isActive = link.href === currentPath;
            const alwaysYellow = link.title === "Different…";
            return (
              <a
                href={link.href}
                aria-current={isActive ? "page" : null}
                class={`${linkBase} ${
                  isActive
                    ? linkActive
                    : alwaysYellow
                      ? "text-secondary cursor-pointer"
                      : linkInactive
                }`}
              >
                {link.title}
              </a>
            );
          })
        }
      </nav>

      <div class="w-6 min-[1150px]:hidden"></div>
    </div>
  </div>

  <nav
    id="mobileNav"
    class="bg-primary shadow-lg hidden min-[1150px]:hidden"
  >
    <div class="px-2 pt-2 pb-4 space-y-2">
      {
        navItems.map((item) => {
          if ("children" in item) {
            const isParentActive = currentPath.startsWith("/solutions");
            return (
              <details
                open={isParentActive}
                class="mb-2 cursor-pointer"
              >
                <summary
                  class={`flex items-center px-3 py-2 font-medium rounded-md transition-colors ${
                    isParentActive
                      ? "bg-secondary/10 text-secondary"
                      : "text-white hover:bg-primary/80 hover:text-secondary"
                  }`}
                >
                  {item.title}
                  <svg
                    class="ml-2 w-4 h-4 transition-transform details-open:rotate-180"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </summary>

                <div class="pl-5 mt-1 space-y-1">
                  {item.children.map((link) => {
                    const isActive = link.href === currentPath;
                    return (
                      <a
                        href={link.href}
                        aria-current={isActive ? "page" : null}
                        class={`block px-3 py-2 rounded-md font-medium transition-colors cursor-pointer ${
                          isActive
                            ? "bg-secondary/10 border-l-4 border-secondary text-secondary"
                            : "text-white hover:bg-primary/80 hover:text-secondary"
                        }`}
                      >
                        {link.title}
                      </a>
                    );
                  })}
                </div>
              </details>
            );
          }
          const isActive = item.href === currentPath;
          return (
            <a
              href={item.href}
              aria-current={isActive ? "page" : null}
              class={`block px-3 py-2 rounded-md font-medium transition-colors cursor-pointer ${
                isActive
                  ? "bg-secondary/10 border-l-4 border-secondary text-secondary"
                  : "text-white hover:bg-primary/80 hover:text-secondary"
              }`}
            >
              {item.title}
            </a>
          );
        })
      }

      {
        rightNav.map((link) => {
          const isActive = link.href === currentPath;
          const alwaysYellow = link.title === "Different…";
          return (
            <a
              href={link.href}
              aria-current={isActive ? "page" : null}
              class={`block px-3 py-2 rounded-md font-medium transition-colors cursor-pointer ${
                isActive
                  ? "bg-secondary/10 border-l-4 border-secondary text-secondary"
                  : alwaysYellow
                    ? "text-secondary hover:bg-primary/80 hover:text-secondary"
                    : "text-white hover:bg-primary/80 hover:text-secondary"
              }`}
            >
              {link.title}
            </a>
          );
        })
      }
    </div>
  </nav>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const nav = document.getElementById("navbar");
    if (nav)
      window.addEventListener("scroll", () =>
        nav.classList.toggle("shadow-lg", window.scrollY > 10)
      );

    const btn = document.getElementById("navToggle");
    const menu = document.getElementById("mobileNav");
    if (!btn || !menu) return;

    const outsideClick = (e) => {
      if (!menu.contains(e.target) && e.target !== btn) {
        menu.classList.add("hidden");
        document.removeEventListener("click", outsideClick);
      }
    };
    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      menu.classList.toggle("hidden");
      if (!menu.classList.contains("hidden"))
        document.addEventListener("click", outsideClick);
    });
  });
</script>
